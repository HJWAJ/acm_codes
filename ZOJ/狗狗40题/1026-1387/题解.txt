题意：给一个Morse码的串和一个Dictionary，问Dictionary中的单词组成的词组转化成Morse码后能和原串完全匹配的词组有多少个。

题解：据说正解是典型的AC自动机+DP？shi哥表示不需要AC自动机，在字典树上DP即可。

我的做法：不熟悉AC自动机的本菜只能暴力dp了。首先预处理出每个单词对应的morse串，不用字符串拼接而是直接用指针，可以加速。

dp[0]=1；对于dp[i]，枚举每个单词长度len[j]，如果能匹配，那么dp[i]+=dp[i-len[j]]，因为是完全匹配，匹配过程就只能用暴力了。O（10000*10000*80）。居然可以AC

优化1：对于dp[i]，枚举单词长度，dp[i-len[j]]=0，那么是否匹配效果是一样的，这个匹配就不用算了。因为大部分的dp值都应该是0，所以可以看做复杂度降到了O（10000*10000）。

优化2：逆向思维。从dp[0]开始，枚举每一个dp[i+len[j]]，能匹配，则dp[i+len[j]]+=dp[i]。这样的话，如果dp[i]=0，就不用遍历一遍单词表了。由大部分dp[0]都是0，复杂度降到了O(10000*k)（k为较小常数）。

优化3：一开始想到的优化，虽然感觉不靠谱：如果仍然TLE，那么匹配时采用随机测试法，即长度不相同直接返回不匹配，长度相同时随机抽查若干不同位置来匹配。